h1. UploadPack

UploadPack is a plugin that makes file uploads in CakePHP as easy as possible. It works with almost no configuration, but if you need more flexibility you can easily override default settings.

What's included:

h4. UploadBehavior

Attach it to your model, it will detect any uploaded file and save it to disk. It can even automatically generate thumbnails of uploaded images.

h4. UploadHelper

Use it in your views to display uploaded images or links to files in general.

h2. Installation

# Download this: _http://github.com/szajbus/uploadpack/zipball/master_
# Unzip that download.
# Copy the resulting folder to _Plugins_
# Rename the folder you just copied to _upload_pack_

h2. Usage

Look at an example.

Scenario: Let users upload their avatars and then display them in two styles - original size and thumbnail.

Solution:

We'll need @User@ model with @avatar_file_name@ field.

<pre><code>CREATE table users (
	id int(10) unsigned NOT NULL auto_increment,
	login varchar(20) NOT NULL,
	avatar_file_name varchar(255)
);
</code></pre>

Attach @UploadBehavior@ to @User@ model and set it up to handle avatars.

<pre><code><?php
	class User extends AppModel {
		
		public $name = 'User';
		public $actsAs = [
			'UploadPack.UploadHelper' => [
				'image' => [
					'styles' => [
						'big' => '200x200',
						'small' => '120x120',
						'thumb' => '80x80'
					]
				]
			]
		];
		
	}
?>
</code></pre>

That's all we need to do with our model. We defined one thumbnail style named 'thumb' which means that uploaded image's thumnbnail of 80x80 pixels size will be generated and saved to disk together with original image.

We didn't touch any other configuration settings so files will be saved as @webroot/upload/:model/:id/:basename_:style.:extension@ (with :keys appropriately substituted at run time). Make sure that @webroot/upload/users@ folder is writeable.

Let's upload a file now. We need to add a file field to a standard "create user" form. Your form must have the right enctype attribute to support file uploads, e.g. @$form->create('Users', ['type' => 'file'));@. Note that we omit the field's @_file_name@ suffix here.

<pre><code><?php echo $this->Form->file('User.avatar') ?></code></pre>

The last thing to do is to handle form-submit in a controller.

<pre><code><?php
class UsersController extends AppController {
	
	public $name = 'Users';
	public $uses = ['User'];
	public $helpers = ['Form', 'UploadPack.Upload'];

	function create() {
		$user = $this->Users->newEntity($this->request->data);
		if ($this->request->is(['post', 'put'])) {
			if ($this->Users->save($user)) {
				$this->redirect('/users/show/'.$this->Users->id);
			}
		}
		$this->set('user', $user);
	}

	function show($id) {
		$this->set('user', $this->User->findById($id));
	}
	
}
?>
</code></pre>

Let's create @users/show.ctp@ view to see the results. Note that we've included UploadHelper in controller's $helpers.

<pre><code>That would be the original file:
<?php echo $this->Upload->uploadImage($user, 'User.avatar') ?>

And now it's thumbnail:
<?php echo $this->Upload->uploadImage($user, 'User.avatar', ['style' => 'thumb')) ?>
</code></pre>